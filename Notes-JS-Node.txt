Javascript:

Lab Setup:

1.node js
2.vs code
//////////////////////////////////////////////////////////////////////////

What is Java script?

Javascript is one of the Programming langugage.

C++/Java is Object Oriented Programming Language.

Programming paradigms

1.Procedural
2.OO
3.Functional 
4.Event driven
5.Rule based
6.Constrain oriented
etc........

Languages are reference implementation of those paradgims.

Pure and style/based PL:
...................

if any language follows one programming paradigm principle 100% which is called Pure
eg: C++ is pure object oriented Programming.

if any language mixes  many programming paradigm principle or here and there which is called 
Style /based

eg:javascript mixes many paradgims.


      "javascript is Object based , functional , event driven Programming language"

...........................................................................................

Java is pure oo?

 From java 8 , java is Object oriented, functional style programming.


/////////////////////////////////////////////////////////////////////////////////////////////

Typing: Data types:
..................

1.Strongly/static typed pl
  
  Type of variable is verified during compile time. if type mismatch, compiler throw error.
eg:
  c,c++,java.......

2.Weakly/dynamic typed pl

Type of variable is identified during run time. if type mismatch, runtime throw error.

///////////////////////////////////////////////////////////////////////////////////////

                      "javascript is dynamic typed pl"
.........................................................................................
History Of javascript:

javascript was created at "Netscap Communication" in 1995.

javascript was created for web computing :  to process HTML Pages dynamically at browser.

javascript was created by "Brendan Eich"

Time line:

1.javascript project started 1995

1.first name of the language was "Mocha"
2.language was renamed to "Live Script" -1996
3.language was renamed to "java Script" -1996

After language ready, which was submitted to standard body "ECMA international"


1996---1997 : JS 1.0 =>ES 1.0

1997- 1998 :  ES 2.0: It did not come

1999 :  ES 3

2007 : ES 4

2008 : ES 5

2012-2015 : ES 6

2016  ONWARDS : es 7,es 8, ......
...........................................................................................

Compilation,Execution, Runtime:
...............................

Javascript has no independant compiler like c++/java.

Runtime: 

 It is program, written in c / c++ , any language.
 Runtime is abstraction/communication layer between os and application programms.

Types of runtime:

1.embeded runtime
  embeded into another software
 eg:
   embeded game engines...
   browsers has lot of embbeded 

   webservers which running java code : tomcat

2.standalone runtime
  which is avaiable separatly
  JVM


Javascript runtime:
...................
 it is avaiable in both mode.

Embeded mode:
  js runtime is avaiable inside every browser.

chrome : V8 
firefox : Spider Monkey
ms : Chakara.

standalone mode:
  node js, which has standalone js runtime.
/////////////////////////////////////////////////////////////////////////////////////////////

Does javascript code is compiled?

 Yes! , inside javascript runtime, which has embbeded compiler.
////////////////////////////////////////////////////////////////////////////////////////////

We are going to use v8:
  "V8 is Googleâ€™s open source high-performance JavaScript and WebAssembly engine, written in C++. 
It is used in Chrome and in Node.js, 
////////////////////////////////////////////////////////////////////////////////////////////
Where is javascript ? what type of applications we can build using javascript?

1.javascript was created for browser only to process web documents.

Now a days  javascript is used every where.

1. javascript is in server side market : for build Webapps,webservices :Node.js
2. javascript is in mobility  : build mobile applications
3. javascript is in IOT : build any device specific applications.
/////////////////////////////////////////////////////////////////////////////////////////////

Java Script Programming language: ES 5 AND ES 6
...............................................

1.language fundamentals
2.functional programming
3.Object based programming
4.Browser specific features
   DOM,AJAX.

Node Js:
   Build Nonblocking IO applications 

/////////////////////////////////////////////////////////////////////////////////////////

1.language fundamentals

types,variables, values : literals

JS dynamic typed language : no type system.

Declare variable

 var | let | const | this  variableName = value(literals).

literals : values based on it only the type of variable is identified during runtime.

literals types:

1.string
2.number
3.boolean
4.undefined
5.NaN
6.infinity
7.function
8.null
9.object

 var : is used in es 5
 let and const is used in es 6
 this : both version


Note: 
1.var,let,const all are same only but there are few differences, to be disucssed latter.
 var vs let and const.

2.In js ; is optional 


Point:

  if you are building javascript application based on es 6, recommandation is use "let and
const" always.


1.strings:

1.16 bit unicode charaters.

2.strings can be declared inside  "" or ''  or ``(back-tick) es 6 feature
   "" : inspired from java and c++
   '' : js specific notation.
  
3.string concatnation can be done
   +  and , and `foo ${variableName}`



/**
 * strings
 */

//es 5 syntax only for few examples 

var firstName = "Subramanian";
var lastName = 'Murugan'
//print
console.log("Full Name " + firstName + lastName);
console.log("Full Name", firstName, lastName);
//es6 string 
console.log(`Full Name ${firstName} ${lastName}`)
let city = 'Coimbatore';
//back tick notation use case : for string concatation : template literal
console.log(`City ${city}`)
//back tick notation use case : for multi line string literal
//es 5 multi line strings
let title = 'Sony'
let htmlDoc = "<html>" +
    "<head><title>" +
    title +
    "</title>" +
    "</head>" +
    "<body><h1>Sony Digital</h1>" +
    "</body></html>";

console.log(htmlDoc);
//es 6 multi line strings
let htmlnewDoc = `<html>
    <head>
    <title>${title}</title>
    </head>
    <body><h1>Sony Digital</h1>
    </body></html>`;
console.log(htmlnewDoc);
/////////////////////////////////////////////////////////////////////////////////////////
Numbers:

1.number size is 64 bit by default aka double.
2.It is IEEE 754 Standard.


//numbers
//numbers
let price = 10;
let qty = 100;
//numerical compuation
let totalPrice  =  price * qty;
let avgPrice = totalPrice / 2;

console.log(`Price is ${price} and qty is ${qty}`);
console.log(`Total Price ${totalPrice}`)
console.log(`Avg Price ${avgPrice}`)

operators: numerical operations
Note : all operators from c/c++/java is available in javascript
 

undefined:
..........
It is value, assigned to a variable, if no valid literal is assigned.

let firstName;
let price;
let qty;
console.log(`First Name ${firstName}`);
console.log(`price ${price} ${qty}`);

///////////////////////////////////////////////////////////////////////////////////////

Related to Numbers:

1.NaN :Not a Number 

Not a Number but is number.
NaN is error code.
NaN error code will come due to numerical compuation failures.

Note:

 if you get NaN as out put, it is danger/toxic , it is runtime error, you need to fix.

When NaN will come?
 
//NaN use case 1; if you do numerical compuation against undefined

let price =100; //number
let qty; // undefined
let totalPrice  = price * qty; // number * undefined
console.log(`total price ${totalPrice}`);

Type conversion : string to number

types of Type conversion

1.implicit Type conversion
 js automatically converts string to number
2.explicit Type conversion
 js uses conversion utility apis to convert string to number.



//NaN use case 1; if you do numerical compuation against undefined

let price = 100; //number
let qty; // undefined
let totalPrice = price * qty; // number * undefined
console.log(`total price ${totalPrice}`);

//Type conversion : implicit
let x = "10";//type is string but value is number
let y = 10;
let totalValue = x * y; // x value is converted into number first and then computation starts
console.log(`Total Value ${totalValue}`)

//Type convserion : explicity Using parse Utilty
let a = "10";
let b = 90;
let totalA = parseFloat(a) + b;
console.log(`Parse Functions ${totalA}`);

//Use case 2:NaN during type conversion
let stockValue = "$10"; 
//let totalStock = stockValue * 10; // stockvalue is converted from string to number but special character will cause nan
let totalStock = parseInt(stockValue) * 10;
console.log(`Type conversion Error ${totalStock}`);


2.infinity
div by 0

let price = 1000;
let avgPrice = price / 0;
console.log(`Avg Price ${avgPrice}`);
/////////////////////////////////////////////////////////////////////////////////////////
booleans:
  
js supports booleans with value of true / false


constrol structures

1. if ... if ..else, switch case : similar to c / c ++ and java

operators 
 Tenary operator : to replace if condtion.

Equality operator:

==, ===
!=,!==

== : compares only value and does not compare type.
     it is bug. buggy operator.
=== : Compares value and type

Recommandation : Use always "==="


comparsional operators

 <,<=,>,>=, : similar to c and c++

conditional operators

 || ,&& 


In js which is true and which falsy:
////////////////////////////////////

In js every thing is true expect the following values.

Falsy Values:

1.boolean false
2.0
3.undefined
4.empty string "",''
5.NaN
6.null

//booleans

let isActive = true;
let isEnabled = false;
console.log(`IsActive ${isActive}`);
console.log(`Is Enabled ${isEnabled}`);

if (isActive) {
    console.log('Active')
} else {
    console.log('In active');
}
//tenary operator
isEnabled ? console.log('Enabled') : console.log('Disabled')

//Eq: if you are comparing two variables

let a = 10;
let b = 10;
if (a == b) {
    console.log('A and B are equal')
} else {
    console.log('A and B are not equal')

}

//comparing strings and numbers not valid

let x = "10";
let y = 10;
if (x == y) {
    console.log('X and Y are equal')
} else {
    console.log('X and Y are not equal')
}
if (x === y) {
    console.log('X and Y are equal')
} else {
    console.log('X and Y are not equal')
}
//||
if (isActive || isEnabled) {
    console.log('Ok')
} else {
    console.log('Not Ok!')
}
//////////////////////////////////////////////////////////////////////////////////
//Advanced booleans

let start = 1;
if (start) {
    console.log('Started')
} else {
    console.log('Not Started')
}

let message;
let res = message ? "Hai" : "Welcome"
console.log(res);
/////////////////////////////////////////////////////////////////////////////////
// || 

/**
 * if first operand(price) is truthy , the result would be first operand else 
 * result would be second
 */
let price = 199;
let priceValue = price || 10;
console.log(`Price Value ${priceValue}`);

// && : please follow the above rule but opposit
........................................................................................


Type of variable, reinitalization:
...................................

js provides a special operator called "type of" operator

type of operator
1.returns the runtime type of value in smaller case "number"


//how to reinitalize the variables.

let myvariable = 100;
let price;
let name = "test"
let a = 10;
let b = "$90";
let ab = a * b;
let x = 10 / 0;

console.log(typeof myvariable)
console.log(typeof price)
console.log(typeof name);
console.log(typeof ab);
console.log(typeof x);

//////////////////////////////////////////////////////////////////////////
let foo = 10;
console.log(typeof foo);
foo = true;
console.log(typeof foo);
foo ="test";
console.log(typeof foo);
////////////////////////////////////////////////////////////////////////////////

//what if i dont want to reinitalize the variable
const PI =3.14
console.log(`PI ${PI}`);
//PI =90.89;
//console.log(`PI ${PI}`);

//const variable must have been initalized to any value
// const FOO;
// console.log(`FOO ${FOO}`);

//////////////////////////////////////////////////////////////////////////////////

//loops
for (let i = 0; i < 10; i++) {
    console.log(i);
}
//while , do while remains same other languages

other keywords:
break,continue,switch...
/////////////////////////////////////////////////////////////////////////////////////////////

Functions and functional programming:
....................................

in javascript logic is represented in functions.


syntax:

 function functionName(Args){
   //body
   return statement
 }


//functions declaration

function sayHello() {
    console.log('Hello!')
}
//function calling/ invocation
sayHello();
////////////////////////////////////////////////////////////////////////
//Args and Parameters

//a and b are args
//default values : default args
function add(a = 1, b = 1) {
    let result = a + b;
    console.log(`Add Result is ${result}`);
}
//10,10 are parameters
add(10, 10);
//parameters are hardcoded
add(1, 1);
//parameters are passed through variables
let x = 90;
let y = 90;
add(x, y);

//if no parameters are passed
add(); //undefined,undefined

add(12); //value,undefined
/////////////////////////////////////////////////////////////////////////////////

//i want to design function which should take no of parameters,but i dont know 
//in advance
//es 6 : var args : using rest operator
function logger(context, ...args) {
    //in es5 , argugments
    //console.log(arguments)
    console.log(context, args);
}
logger('Application', 'info', 'This is good message');
logger('Device', 'error', 'Something went wrong', 501);
////////////////////////////////////////////////////////////////////////////////
//return statement
function getStockValue() {
    return 100;
}
console.log(getStockValue());
function getQty() {
    let qty = 100;
    return qty;
}
console.log(getQty());
function getInfo(info) {
    return info;
}
console.log(getInfo('this is javascript!'));

function login(userName, password) {
    if (userName === 'admin' && password === 'admin') {
        return true;
    }
    return; //undefined : falsy value
}
login('admin', 'admin') ? console.log('Login success!') : console.log('Login failed!');
login('foo', 'foo') ? console.log('Login success!') : console.log('Login failed!');

/////////////////////////////////////////////////////////////////////////////////////

function literals:
.................

function is value /literal like numbers

let a =10;

function can be assigned to a variable.

once if you assign function to a variable, that variable is used to point that function
and that variable can be used to invoke that function.


/**
 * 
once if you assign function to a variable, that variable is used to point that function
and that variable can be used to invoke that function.
**/

//way -1
function sayHello(name) {
    console.log('hello', name)
    return `Hello ${name}`;
}
let hello = sayHello;
//invoke that function
let result = hello('Subramanian');
console.log(result);
//////////////////////////////////////////////////////////////////////////////////

//anonmous function : function without name
let hai = function (name='defaultName') {
   //console.log(`Hai ${name}`)
   return `Hai ${name}`;
};
console.log(hai('subramanian'));
///////////////////////////////////////////////////////////////////////////////////

function parameters:

What could be function parameters?

 "Any literal" : number,string,boolean,undefined,"function",objects

//function as parameter to another function

//connect =function(){}
function startServer(connect) {
    const result = connect('HTTP');
    console.log(result);
}

startServer(function (name) {
    // console.log(`${name} Server Started!`);
    return `${name} Server Started!`
});
///////////////////////////////////////////////////////////////////

function startClient(connect) {
    connect('Mobile');
}
let handler = function (name) {
    console.log(`${name} Client is ready!`);
};
startClient(handler);

/////////////////////////////////////////////////////////////////////////////////

Returning function from another function:
..........................................

Since function is literal, we can return function from another function.


function welcome() {
    console.log('welcome')
    //nested function
    function sayHello(name) {
        console.log('Hello!!!!', name);
    }
    //sayHello();
    return sayHello;
}
let hello = welcome();
hello('Subramanian');
//////////////////////////////////////////////////////////////////////////
function counter() {
    return function () {
        return 10;
    }
}
let inc = counter()
console.log(inc());

//short cut
console.log(counter()());
///////////////////////////////////////////////////////////////////////////////////
//Deep nesting: function inside funciton inside function
//CURRRY Function
function prepareCake(iceCream) {
    return function (sugar) {
        return function (milk) {
            return function (color) {
                return `${iceCream} ${sugar} ${milk} ${color} `
            }
        }
    }
}
let cake = prepareCake('cream')('sugar')('milk')('color')
console.log(`Cake : ${cake}`);

///////////////////////////////////////////////////////////////////////////////////////////

ES 6 Function declaration:

 Arrow functions:
////////////////////

Why arrow functions

1.simple syntax : syntax sugar on function declaration

2.the value of "this" is different 


//es 5 function declaration
let hai = function () {
    console.log('Hai');
};
hai();
//arrow functions

let hi = () => {
    console.log('Hai');
};
hi();
//arrow function flavours

//1.if function has only one line of body; remove {}
hi = () => console.log('Hai');
hi();
/////////////////////////////////////////////////////////////////////////////////
//2.args and parameters: multi parameters with default value
let add = (a = 0, b = 0) => {
    let r = a + b;
    console.log(`The result is ${r}`);
};
add(1, 1);
/////////////////////////////////////////////////////////////////////////////////
//3.Single parameter, no default value : drop ()
let setName = name => console.log(`Name ${name}`);
setName('Subramamanian')
////////////////////////////////////////////////////////////////////////////////
//4.No Parameter drop () / _
let greet = _ => console.log('Greetings!');
greet();
///////////////////////////////////////////////////////////////////////////////
//5.Return value
let substract = (a = 0, b = 0) => {
    return a - b;
};
console.log(substract(2, 1));
//6.only return : you can drop {} and return statement
substract = (a = 0, b = 0) => a - b;
console.log(substract(2, 1));
//////////////////////////////////////////////////////////////////////////////////
//7.single parameter ,no default value , return the same.
let stock = value => value;
console.log(stock(2000));
//////////////////////////////////////////////////////////////////////////////////
//how to pass function as parameter in arrow version.
// function startServer(connect) {
//     connect('HTTP');
// }
let startServer = connect => connect('HTTP');
// startServer(function () {
//     console.log(`Server Started!`);
// });
startServer(name => console.log(` ${name} Server Started!`));
//////////////////////////////////////////////////////////////////////////

// function startClient(connect) {
//     connect('Mobile');
// }
let startClient = connect => connect('Mobile');

let handler = name => console.log(`${name} Client is ready!`);
startClient(handler);
///////////////////////////////////////////////////////////////////////////////
//return arrow 
// function counter() {
//     return function () {
//         return 10;
//     }
// }
// const counter = () => {
//     return () => 10;
// }
const counter = () => () => 10;
let inc = counter()
console.log(inc());
console.log(counter()());
/////////////////////////////////////////////////////////////////////////////////

// function prepareCake(iceCream) {
//     return function (sugar) {
//         return function (milk) {
//             return function (color) {
//                 return `${iceCream} ${sugar} ${milk} ${color} `
//             }
//         }
//     }
// }
const prepareCake = iceCream => sugar => milk => color => `${iceCream} ${sugar} ${milk} ${color} `
let cake = prepareCake('cream')('sugar')('milk')('color')
console.log(`Cake : ${cake}`);
//////////////////////////////////////////////////////////////////////////////////////////
Immediately-invoked Function Expression :
........................................

(function () {
    statements
})();

//iife

let result = (function (game) {
    console.log(`${game} is initalized`);
    return 'Version 1.0.0'
})('Game');
console.log(result);

let res = (game => {
    console.log(`${game} is initalized`);
    return 'Version 1.0.0'
})('Play Station');
/////////////////////////////////////////////////////////////////////////////////////////////

Object based Programming:
.........................

Object based vs Object oriented Concept:
........................................

OO concepts:
...........

1.Abstraction
   class based
2.Encapsulation
   code sharing visibility
3.Modularity
   -code sharing
4.Hierachy
   -HAS-A 
   -IS-A inheritance
5.Typing
   -Polymorphsim
      -Compile - runtime
----------------------
6.Concurrency
   -Process level Multi threading
   -Kernal level multi threading : Async
7.Persistency
  -stroage


if any language does not support any one of  first 5 principles fully or paritally then
those languages are called as Object based language.

//////////////////////////////////////////////////////////////////////////////////////////

What is Object?

Object can be explained in three views

1.real time
   Any thing can be object, but it should be in problem domain.
2.software modeling
   UML digarams
3.Program view
   Memory representation.

In languages:

 Objects are runtime representation of data and methods which are grouped under one single
 unit we "class".

Javascript is class free object based pl. no classes like traditional oo language.

classes are repsented in js as functions.

Roles of Functions

1.function can act as stack frame. holding biz logic
2.function can act as Object template(class)

How decision is made about function 

  - during function invocation.

funciton invocation syntax

    fun();  => stack frame creation.
 new fun(); => Object creation

/////////////////////////////////////////////////////////////////////////////////////

Coding standards:
................

1.functions

 if function is declared for holding biz logic, then

  name of the function should be 

         verb  => start,stop,calculate.....
         verb+Noun => startServer, stopServer...

 if function is declared for creating objects then

  name of the function should be 
       Noun =>Employee,Customer,Player,PlayStation,Patient
////////////////////////////////////////////////////////////////////////////////////

            Objects are created inside javascript runtime "Heap Memory".

Objects Creational Patterns:

1.Constructor pattern
   functions
   classes : es 6
   
2.Literal Pattern

Object => state + Behaviour =>instance variables and instance methods
 how to declare object properties(state,behaviour)
  "this" : keyword  is used to declare



//declare class , object properties

function Employee() {
    //state
    this.id = 1;
    this.name = 'Subramanian';
    this.city = 'Coimbatore';
    this.salary = 12000;
    this.da = 1000;
    this.hra = 2000;
    //behaviours : methods
    this.calculateSalary = function () {
        return this.salary + this.hra + this.da;
    }
    this.calculateTax = function () {
        return (this.salary + this.hra + this.da) * 10 / 100
    }
}
//object creation
//emp is reference variable
//new is operator
//Employee() ;; function call , constructor call
const emp = new Employee();
//Access Object Properties : using .operator / [] operator.
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);
///////////////////////////////////////////////////////////////////////////////////////////

state initalizations:

1.hardcoded state
this.id = 1;
    this.name = 'Subramanian';
    this.city = 'Coimbatore';
    this.salary = 12000;
    this.da = 1000;
    this.hra = 2000;
  

2.after object creation
 by using reference variable you can update object properties


//state initalization

function Employee() {
    //hardcoded
    this.id = 1;
    this.name = 'Subramanian';
    this.city = 'Coimbatore';
    this.salary = 12000;
    this.da = 1000;
    this.hra = 2000;
    //behaviours : methods
    this.calculateSalary = function () {
        return this.salary + this.hra + this.da;
    }
    this.calculateTax = function () {
        return (this.salary + this.hra + this.da) * 10 / 100
    }
}
//object creation
//emp is reference variable
//new is operator
//Employee() ;; function call , constructor call
const emp = new Employee();
//Access Object Properties : using .operator / [] operator.
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);

//new values
emp.id =1999;
emp.name = 'Ram';
emp.city = 'Banaglore';
emp.salary =7888;
emp.da=300;
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);


/////////////////////////////////////////////////////////////////////////////////////////

3.using constructor parameters

//How many objects you can create using single function
//You can create More objects.


//default constructor args
function Employee(id = 1, name = 'Subramanian', city = 'Coimbatore', salary = 1000, da = 1000, hra = 2000) {
    this.id = id;
    this.name = name;
    this.city = city;
    this.salary = salary
    this.da = da;
    this.hra = hra;
    //behaviours : methods
    this.calculateSalary = function () {
        return this.salary + this.hra + this.da;
    }
    this.calculateTax = function () {
        return (this.salary + this.hra + this.da) * 10 / 100
    }
}
let emp = null;

console.log(emp);

emp = new Employee();
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);

emp = new Employee(3, 'karthik', 'chennai', 7888, 800, 1200);
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);


emp = new Employee(4, 'John', 'chennai', 7888, 800, 1200);
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
console.log(`Salary ${emp.calculateSalary()}`);
console.log(`TAX ${emp.calculateTax()}`);

//this for garbage collection
emp = null;
//////////////////////////////////////////////////////////////////////////////////////////

Some of the errors when you access object properties:
....................................................
let emp;
console.log(emp);
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)




console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
                      ^

TypeError: Cannot read property 'id' of undefined
    at Object.<anonymous> (C:\session\sony\js-apps\src\index.js:19:23)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11



let emp=null;
console.log(emp);
console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)


console.log(`Id ${emp.id} Name ${emp.name} city ${emp.city}`)
                      ^

TypeError: Cannot read property 'id' of null
    at Object.<anonymous> (C:\session\sony\js-apps\src\index.js:19:23)
    at Module._compile (internal/modules/cjs/loader.js:959:30)
    at Object.Module._extensions..js (internal/modules/cjs/loader.js:995:10)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Function.Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module.runMain (internal/modules/cjs/loader.js:1047:10)
    at internal/main/run_main_module.js:17:11
///////////////////////////////////////////////////////////////////////////////////////////

Hierachy :

 Object Relation ship.

HAS-A :composition 

function Address(doorno = '1', street = 'street', city = 'city', state = 'state', zipcode = 'zipcode') {
    this.street = street
    this.doorno = doorno
    this.city = city;
    this.state = state;
    this.zipcode = zipcode
}

function Employee(id = 1, name = 'defaultName', address = new Address()) {
    this.id = id;
    this.name = name;
    //has-a 
    this.address = address;
}
let emp = null;

emp = new Employee();
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)

let address = new Address('23', '10 th street', 'chennai', 'TN', '600002')
emp = new Employee(34, 'John', address);
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)

emp = new Employee(34, 'John', new Address('23', '10 th street', 'chennai', 'TN', '600002'));
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)
///////////////////////////////////////////////////////////////////////////////////////////

IS-A : inheritance 

Javascript is object based language.

JS inherits Objects from Objects not classes.
  -Object inheritance

JS A prototype-based language?

   What is ProtoType?
      It is Object , used for inheritance, sharing properties across multiple instances
/////////////////////////////////////////////////////////////////////////////////////////////

Program :  Collection of instructions.
instructions : collections of data , methods.

Types of program
1.passive
   The program which is not in RAM
   The program which is in RAM but which is not accessed by CPU 
2.active

 The program which is in RAM
 The program which is in RAM but which is  accessed by CPU 
 
Active Programs called as process.

Every Process /any thing in RAM has common structure:
///////////////////////////////////////////////////////////////////////////////////////////

Objects :

 passive : which is in heap ,but not accessing.
 active : accessd by cpu

////////////////////////////////////////////////////////////////////////////////////////////

Object and Proto type:

 In javascript everything is Object including function.

every function in javascript is Object, we call "Function"

function Employee(){

}

console.log(Employee.name)

 Employee()====>Employee.call()===>stack

 new Emplyee()=====> Heap


 instance : active  heap epresentation of "function object"  

Prototype is "passive Represention" 

Points:

1.Every instance is created from "Passive" function Object

   "Object itself act as instance template"
   "In java Class Object is used to create real instances"

 function(meta)---->new Instance()

2.Any instance is created from functions will have its own prototype Passive Object.



//////////////////////////////////////////////////////////////////////////////////////////

function Employee(id = 1) {
    //instance variable
    this.id = id;
}

//Getting Employee's Prototype
console.dir(Employee.prototype);

//Add sharable properties on prototype ,so that all instance can get the data
Employee.prototype.firstName = 'foo'
Employee.prototype.calculateSalary = function () {
    return 1000;
}

let emp = null;

emp = new Employee() //new Instance from Employee Function Object
emp.id = 9000;
//overriding
emp.calculateSalary = function () {
    return 67800;
}


console.log(emp.id, emp.firstName, emp.calculateSalary())

emp = new Employee() //new Instance from Employee Function Object
console.log(emp.id, emp.firstName, emp.calculateSalary())

emp = new Employee() //new Instance from Employee Function Object
console.log(emp.id, emp.firstName, emp.calculateSalary())

///////////////////////////////////////////////////////////////////////////////////////

Object Augmentation , Object property lookup,Prototype chain:
.............................................................

Object Augmentation:


Object ==Memory Representation.
  What is internal structure of object in c++ /java
  instance data + vtable.

Javascript objects are dictionary /hash table/ hash map
   all javascript objects simple key--value pair datastructure.

class A{
 int x; 

 getX
}

A ===> x +vtable(getx)===>Object 

once object is created , its structure cant be altered
 like adding new property,delete existing proprety while running.

But in js it is possible, you can add,update,delete,iterate: how
  because it is simple datastructure.
  "This is process we can object augmentation".


//Object Augmentation: Adding,deleting,updating,iterating object.

function Employee() {
    //no property
}
//Proto type augmentation
Employee.prototype.salary = 9000;
let emp = new Employee();

console.dir(emp);

//Add new property
emp.id = 1000;
emp.name = 'Ram' //add operation
console.log(`Id ${emp.id} Name ${emp.name}`)
//if prop found, then update else add.
emp.name = 'suburamanian' //update operation
emp.city = 'coimbatore'

//when you look up property, first js search the property in the current
//object---if not-->it looks up its immedate parent(Prototype)--if not--it 
//looks up its immedate parent---Object
console.log(`Id ${emp.id} Name ${emp.name} ${emp.city} ${emp.salary}`) //getters

//delete a property
delete emp.city;
console.log(`Id ${emp.id} Name ${emp.name} ${emp.city} ${emp.salary}`) //getters


//iterations

//object for.in.loop

for (key in emp) {
    console.log(key, emp[key]); // [] dymamic prop value access:
}
///////////////////////////////////////////////////////////////////////////////////////////

ES 6 classes 

//

class Employee {
    //instance variables
    id = 1;
    name = 'Subramanian'
    //methods
    calculateSalary() {
        return 1000;
    }
    calculateTAX = () => 3000;
}
let emp = new Employee();
console.log(`Id ${emp.id}  salary ${emp.calculateSalary()} ${emp.calculateTAX()}` );
///////////////////////////////////////////////////////////////////////////////////////////

//state intialization in classes

//

class Employee {
    //instance variables
    constructor(id = 1, name = 'defaultName') {
        this.id = id;
        this.name = name;
    }
    //methods
    calculateSalary() {
        return 1000;
    }
    calculateTAX = () => 3000;
}
let emp = null;
emp = new Employee();
console.log(`Id ${emp.id} ${emp.name}  salary ${emp.calculateSalary()} ${emp.calculateTAX()}`);
//after object creation
emp = new Employee();
emp.id = 90000;
emp.name = 'john'
console.log(`Id ${emp.id} ${emp.name}  salary ${emp.calculateSalary()} ${emp.calculateTAX()}`);

//constructor params
emp = new Employee(45, 'Kumar');
console.log(`Id ${emp.id} ${emp.name}  salary ${emp.calculateSalary()} ${emp.calculateTAX()}`);
///////////////////////////////////////////////////////////////////////////////////////////

class Address {
    constructor(doorno = '1', street = 'street', city = 'city', state = 'state', zipcode = 'zipcode') {
        this.street = street
        this.doorno = doorno
        this.city = city;
        this.state = state;
        this.zipcode = zipcode
    }
}

class Employee {
    constructor(id = 1, name = 'defaultName', address = new Address()) {
        this.id = id;
        this.name = name;
        //has-a 
        this.address = address;
    }
}
let emp = null;

emp = new Employee();
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)

let address = new Address('23', '10 th street', 'chennai', 'TN', '600002')
emp = new Employee(34, 'John', address);
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)

emp = new Employee(34, 'John', new Address('23', '10 th street', 'chennai', 'TN', '600002'));
console.log(`Id ${emp.id} Name ${emp.name} ${emp.address.city}`)
/////////////////////////////////////////////////////////////////////////////////////////////

class and inheritance:
......................

class Account {
    constructor(firstName = 'firstName') {
        this.firstName = firstName;
        console.log('Account is initalized')
    }
    //methods
    withdraw() {
        return 100;
    }
}
Account.prototype.secKey = 'XXX@#$#$'
Account.prototype.deposit = function(){
    return 0;
}

class SavingsAccount extends Account {
    constructor(firstName) {
        super(firstName);//call super class constructor
        console.log('SavingsAccount is initalized')
    }
    //redefining
    withdraw() {
        return 100888 * super.withdraw();
    }
}
let sb = new SavingsAccount('Subramanian');
console.log(`${sb.firstName} withdraw ${sb.withdraw()} ${sb.deposit()} ${sb.secKey}`)


////////////////////////////////////////////////////////////////////////////////////////////

Literal Objects:

1.no function/classes to create object

let refVar = {
 key:literal,
 key:literal
}


//literal objects

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 1900,
    isActive: true,
    //methods
    //es 5
    // calculateSalary: function () {
    //     return 1000;
    // }
    //es 6
    //calculateSalary: () => 1000
    //es 6 class like methods
    calculateSalary(){
        return 1000
    }

};
console.log('Employee information')
console.log(`Id ${emp.id} name ${emp.name} salary ${emp.salary}`)
console.log(`Total Salary ${emp.calculateSalary()}`)
///////////////////////////////////////////////////////////////////////////////

state intialization:
//literal objects :state initalization 
//hardcoded

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 1900,
    isActive: true,
    calculateSalary() {
        return 1000
    }

};
console.log('Employee information')
console.log(`Id ${emp.id} name ${emp.name} salary ${emp.salary}`)

emp.id = 9000
emp.name = 'ram'
console.log(`Id ${emp.id} name ${emp.name} salary ${emp.salary}`)

console.log(`Total Salary ${emp.calculateSalary()}`)
/////////////////////////////////////////////////////////////////////////////////////////

HAS-A and is-a :


//has-a relationship

let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 1900,
    isActive: true,
    //has-a
    address: {
        city: 'Chennai',
        state: 'TN'
    },
    calculateSalary() {
        return 1000
    }

};
console.log('Employee information')
console.log(`Id ${emp.id} name ${emp.name} salary ${emp.salary} ${emp.address.city}`)

/////////////////////////////////////////////////////////////////////////////////////////////

Literal Object keys and values:

Literal object key has its data type and value type is differnt

 id:10
 id has one datatype
 10 is one datatype

Point :

 key data type is always string.
 
 string means must be enclosed with "" or '' ``.


let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 1900,
    isActive: true,
    //has-a
    address: {
        city: 'Chennai',
        state: 'TN'
    },
    calculateSalary() {
        return 1000
    }

};

look at above code keys not enclosed as string literal
   but if not also it is string.

can i add double quotes to key : yes



//has-a relationship

let emp = {
    "id": 1,
    "name": 'Subramanian',
    "salary": 1900,
    "isActive": true,
    //has-a
    "address": {
        "city": 'Chennai',
        "state": 'TN'
    },
    calculateSalary() {
        return 1000
    }

};
console.log('Employee information')
console.log(`Id ${emp.id} name ${emp.name} salary ${emp.salary} ${emp.address.city}`)
////////////////////////////////////////////////////////////////////////////////////////////
Object Destructuring: ES 6
..........................

Destructuring means breaking the object into keys.




//passing object as parameter

// function printEmployee(emp) {
//     console.log(`Id ${emp.id}`)
//     console.log(`Name ${emp.name}`)
//     console.log(`Salary ${emp.salary}`)
//     console.log(`IsActive ${emp.isActive}`)
//     console.log(`City ${emp.address.city}`)
//     console.log(`State ${emp.address.state}`)
// }


// function printEmployee(emp) {
//     //Object destrucing
//     const { id, name, salary, calculateSalary, 
//         isActive, address: { city, state } } = emp;
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Salary ${salary} ${calculateSalary()}`)
//     console.log(`IsActive ${isActive}`)
//     console.log(`City ${city}`)
//     console.log(`State ${state}`)
// }

// function printEmployee({ id, name, salary, calculateSalary,
//     isActive, address: { city, state } }) {
//     console.log(`Id ${id}`)
//     console.log(`Name ${name}`)
//     console.log(`Salary ${salary} ${calculateSalary()}`)
//     console.log(`IsActive ${isActive}`)
//     console.log(`City ${city}`)
//     console.log(`State ${state}`)
// }
const printEmployee = ({ id, name, salary, calculateSalary,
    isActive, address: { city, state } }) => {
    console.log(`Id ${id}`)
    console.log(`Name ${name}`)
    console.log(`Salary ${salary} ${calculateSalary()}`)
    console.log(`IsActive ${isActive}`)
    console.log(`City ${city}`)
    console.log(`State ${state}`)
}


let emp = {
    id: 1,
    name: 'Subramanian',
    salary: 1900,
    isActive: true,
    //has-a
    address: {
        city: 'Chennai',
        state: 'TN'
    },
    calculateSalary() {
        return 1000
    }

};
printEmployee(emp);

////////////////////////////////////////////////////////////////////////////////////////

//Object returning and destrucing


// function getEmployee(id = 1, name = 'Subramanian', isActive = false, salary = 1900, city = 'Chennai', state = 'TN') {
//     return {
//         id: id,
//         name: name,
//         salary: salary,
//         isActive: isActive,
//         //has-a
//         address: {
//             city: city,
//             state: state
//         }
//     };
// }

// function getEmployee(id = 1, name = 'Subramanian', isActive = false, salary = 1900, city = 'Chennai', state = 'TN') {

//     //If key:localvariable is same eg id:id - Make it one, remove any one
//     return {
//         id,
//         name,
//         salary,
//         isActive,
//         //has-a
//         address: {
//             city,
//             state
//         }
//     };
// }
//Arrow version
const getEmployee = (id = 1, name = 'Subramanian',
    isActive = false, salary = 1900, city = 'Chennai', state = 'TN') => ({
        id,
        name,
        salary,
        isActive,
        address: {
            city,
            state
        }
    });


const { id, name, salary, calculateSalary,
    isActive, address: { city, state } } = getEmployee();
console.log(`Id ${id}`)
console.log(`Name ${name}`)
console.log(`Salary ${salary} `)
console.log(`IsActive ${isActive}`)
console.log(`City ${city}`)
console.log(`State ${state}`)
////////////////////////////////////////////////////////////////////////////////////////////

Javascript Built in Objects:
...........................

1.Object

 Object super class /Object in js.
 Every object has Object super object.
//Buit in objects

//Object

const emp = {
    id: 1
}
Object.freeze(emp);
//add new Property
emp.name = 'subramanian'

console.log(emp.id, emp.name)

//Object.assign  : clone the Object  , return new object

const customer = {
    id: 1
}
const newCustomer = Object.assign({}, customer, { name: 'Subramanian', city: 'coimbatore' })
console.log(newCustomer)

2.Wrapper Objects 
   Any wrapper objects 
     - new WrapperFunction() = new Number(), new String(), new Boolean()
     - literal pattern "" ,10,true =>This is recommended.

    "es" =>instance String Object
 
//wrappers :

let name = "hello".trim().toUpperCase();//create string object
console.log(name)

//Numbers
let stockValue =89.837342.toFixed(2)
console.log(stockValue)

3.Array : Datastructure

Array is Object
Array is dynamic 
Array can act as queue,stack.....

//Array Objects

//how to declare basic prmitive arrays
let numbers = [1, 2, 3, 4, 5, 6, 7, 8];
//Iterate :
//for..loop : dont use
for (let i = 0; i < numbers.length; i++) {
    console.log(numbers[i]);
}
//iterators: for..each
numbers.forEach((i, index) => console.log(i));
///////////////////////////////////////////////////////////////////////////////
//List of employees
const employees = [
    { id: 1, name: 'A1', salary: 100 },
    { id: 2, name: 'A2', salary: 500 },
    { id: 3, name: 'A3', salary: 1000 },
    { id: 4, name: 'A4', salary: 800 },
    { id: 5, name: 'A5', salary: 1300 }
];
employees.forEach(emp => console.log(emp));
employees.forEach(emp => console.log(emp.id, emp.name));
employees.forEach(({ id, name }) => console.log(id, name));

//Use case I want to print all employee name with lower case
//Transformation api : transform and return new array:pure funciton/immutablity
const transformedemps = employees.map(emp => emp.name.toLowerCase());
console.log(transformedemps)

//i need list of employees whose salary is less than 800
//filter : works on boolean

const filteredemps = employees.filter(emp => emp.salary <= 800);
console.log(filteredemps);

//Kindly findout how to add new element,delete,update element in the array

////////////////////////////////////////////////////////////////////////////////////////////

JSON: Javascript Object Notation:
.................................

History behind:
..............

In 2000, Ecommerce, Biz-Biz integration

2001 : Data interchange conference held

xml,json,text,tmp,yml..........................XML

2005 :  JSON

1.json is light weight than XML : Does not carry schema defintion only data
2.JSON is platform,language indendant.
3.JSON was discovered from Javascript literal object syntax.
  

JSON rules:

1.json files are string/text/ascii files.

2.JSON format is key ; value pair

  key : is string , must be enclosed only with "".
  value:
   should be , string,number,boolean,other literal object, array.

3.since json is text file, we need to extract data, and also we need to create json file
   -we need json parsers

The first parser is written by crock ford for javascript language :  json2.js

then after that many language vendors started adding json parsers in the language level or as third party lib.

ECMA 5 specfication , who added json parser in the language level. Now JSON parser is built in
ES 5, ES 6.

JS language provides parser as Object "JSON"   

Parser method

1.stringify :  OBject to string
2.parse : string object.


Parser :
   string to object
   object to string.
//JSON Parser

//Object
const employees = [
    { id: 1, name: 'A1', salary: 100 },
    { id: 2, name: 'A2', salary: 500 },
    { id: 3, name: 'A3', salary: 1000 },
    { id: 4, name: 'A4', salary: 800 },
    { id: 5, name: 'A5', salary: 1300 }
];
//Object to String
const str = JSON.stringify(employees);
console.log(str);

//String to Object
const obj = JSON.parse(str);
console.log(obj)
////////////////////////////////////////////////////////////////////////////////////////////

Math: Which has mathmetical operations.


//Math
console.log(Math.random())
console.log(Math.sign(10))
console.log(Math.pow(2,2))
///////////////////////////////////////////////////////////////////////////////////////////
How to handle runtime errors : exception handler

try..catch,finally
throw

//Exception handling

function validate(num) {
    try {

        if (num <= 10) {
            throw new Error('Number is less than 10')
        }
        console.log(`Num ${num}`);


    } catch (err) {
        console.dir(err);
    }
    finally {
        console.log('Done!')
    }
}
validate(12)
validate(1)

////////////////////////******************************///////////////////////////////////////
Concurrency : Node JS

scope chain
modularity































































 





